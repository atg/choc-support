{
    "extendedConfidence": true,
    "items": [
        "RegisterHash",
        "NewCipher",
        "NewCBCDecrypter",
        "NewCBCEncrypter",
        "NewCFBDecrypter",
        "NewCFBEncrypter",
        "NewCTR",
        "NewOFB",
        "NewCipher",
        "NewTripleDESCipher",
        "GenerateKey",
        "GenerateParameters",
        "Sign",
        "Verify",
        "GenerateKey",
        "Sign",
        "Verify",
        "GenerateKey",
        "Marshal",
        "P224",
        "P256",
        "P384",
        "P521",
        "Unmarshal",
        "New",
        "New",
        "Int",
        "Prime",
        "Read",
        "NewCipher",
        "DecryptOAEP",
        "DecryptPKCS1v15",
        "DecryptPKCS1v15SessionKey",
        "EncryptOAEP",
        "EncryptPKCS1v15",
        "GenerateKey",
        "GenerateMultiPrimeKey",
        "SignPKCS1v15",
        "VerifyPKCS1v15",
        "New",
        "New",
        "New224",
        "New",
        "New384",
        "ConstantTimeByteEq",
        "ConstantTimeCompare",
        "ConstantTimeCopy",
        "ConstantTimeEq",
        "ConstantTimeSelect",
        "Client",
        "Dial",
        "Listen",
        "LoadX509KeyPair",
        "NewListener",
        "Server",
        "X509KeyPair",
        "CreateCertificate",
        "MarshalPKCS1PrivateKey",
        "MarshalPKIXPublicKey",
        "NewCertPool",
        "ParseCRL",
        "ParseCertificate",
        "ParseCertificates",
        "ParseDERCRL",
        "ParsePKCS1PrivateKey",
        "ParsePKCS8PrivateKey",
        "ParsePKIXPublicKey"
    ],
    "icon": "function",
    "prototypes": [
        " any RegisterHash ( Hash , func( )",
        " any NewCipher ( []uint8 )",
        " any NewCBCDecrypter ( Block , []uint8 )",
        " any NewCBCEncrypter ( Block , []uint8 )",
        " any NewCFBDecrypter ( Block , []uint8 )",
        " any NewCFBEncrypter ( Block , []uint8 )",
        " any NewCTR ( Block , []uint8 )",
        " any NewOFB ( Block , []uint8 )",
        " any NewCipher ( []uint8 )",
        " any NewTripleDESCipher ( []uint8 )",
        " any GenerateKey ( *PrivateKey , io.Reader )",
        " any GenerateParameters ( *Parameters , io.Reader , ParameterSizes )",
        " any Sign ( io.Reader , *PrivateKey , []uint8 )",
        " any Verify ( *PublicKey , []uint8 , *big.Int , *big.Int )",
        " any GenerateKey ( elliptic.Curve , io.Reader )",
        " any Sign ( io.Reader , *PrivateKey , []uint8 )",
        " any Verify ( *PublicKey , []uint8 , *big.Int , *big.Int )",
        " any GenerateKey ( Curve , io.Reader )",
        " any Marshal ( Curve , *big.Int , *big.Int )",
        " any P224 (  )",
        " any P256 (  )",
        " any P384 (  )",
        " any P521 (  )",
        " any Unmarshal ( Curve , []uint8 )",
        " any New ( func( )",
        " any New (  )",
        " any Int ( io.Reader , *big.Int )",
        " any Prime ( io.Reader , int )",
        " any Read ( []uint8 )",
        " any NewCipher ( []uint8 )",
        " any DecryptOAEP ( hash.Hash , io.Reader , *PrivateKey , []uint8 , []uint8 )",
        " any DecryptPKCS1v15 ( io.Reader , *PrivateKey , []uint8 )",
        " any DecryptPKCS1v15SessionKey ( io.Reader , *PrivateKey , []uint8 , []uint8 )",
        " any EncryptOAEP ( hash.Hash , io.Reader , *PublicKey , []uint8 , []uint8 )",
        " any EncryptPKCS1v15 ( io.Reader , *PublicKey , []uint8 )",
        " any GenerateKey ( io.Reader , int )",
        " any GenerateMultiPrimeKey ( io.Reader , int , int )",
        " any SignPKCS1v15 ( io.Reader , *PrivateKey , crypto.Hash , []uint8 )",
        " any VerifyPKCS1v15 ( *PublicKey , crypto.Hash , []uint8 , []uint8 )",
        " any New (  )",
        " any New (  )",
        " any New224 (  )",
        " any New (  )",
        " any New384 (  )",
        " any ConstantTimeByteEq ( uint8 , uint8 )",
        " any ConstantTimeCompare ( []uint8 , []uint8 )",
        " any ConstantTimeCopy ( int , []uint8 , []uint8) )",
        " any ConstantTimeEq ( int32 , int32 )",
        " any ConstantTimeSelect ( int , int , int )",
        " any Client ( net.Conn , *Config )",
        " any Dial ( string , string , *Config )",
        " any Listen ( string , string , *Config )",
        " any LoadX509KeyPair ( string , string )",
        " any NewListener ( net.Listener , *Config )",
        " any Server ( net.Conn , *Config )",
        " any X509KeyPair ( []uint8 , []uint8 )",
        " any CreateCertificate ( io.Reader , *Certificate , *Certificate , interface{} , interface{} )",
        " any MarshalPKCS1PrivateKey ( *rsa.PrivateKey )",
        " any MarshalPKIXPublicKey ( interface{} )",
        " any NewCertPool (  )",
        " any ParseCRL ( []uint8 )",
        " any ParseCertificate ( []uint8 )",
        " any ParseCertificates ( []uint8 )",
        " any ParseDERCRL ( []uint8 )",
        " any ParsePKCS1PrivateKey ( []uint8 )",
        " any ParsePKCS8PrivateKey ( []uint8 )",
        " any ParsePKIXPublicKey ( []uint8 )"
    ],
    "prefix": "crypto."
}